# For distributed tests, call tox with `-n NUMBER` arguments
# Use `setup.cfg` as single-source of truth for dependency specification

[tox]
minversion = 3.24
envlist = default
isolated_build = True
extras =
    all

[testenv]
description = Run tests
changedir = {toxinidir}
setenv =
    SOURCEDIR = {toxinidir}/new_project_name
deps = .[test]
commands =
    pytest -v


[testenv:lint]
description = Perform static analysis, style, and type checks
skip_install = True
changedir = {toxinidir}
deps =
    pre-commit
commands =
    pre-commit run --all-files


[testenv:format]
description = Format code using isort and black
skip_install = True
deps = .[format]
commands =
    isort "{env:SOURCEDIR}"
    black "{env:SOURCEDIR}"


[testenv:{build,clean}]
description =
    build: Build the package in isolation according to PEP517, see https://github.com/pypa/build
    clean: Remove old distribution files and temporary build artifacts (./build and ./dist)
# https://setuptools.pypa.io/en/latest/build_meta.html#how-to-use-it
skip_install = True
changedir = {toxinidir}
deps =
    build: build[virtualenv]
commands =
	clean: python -c "import pathlib; [p.unlink() for p in pathlib.Path('.').rglob('*.py[co]')]"
	clean: python -c "import pathlib, shutil; [shutil.rmtree(p) for p in pathlib.Path('.').rglob('__pycache__')]"
	clean: python -c "import pathlib, shutil; [shutil.rmtree(p) for p in pathlib.Path('.').rglob('*.egg-info')]"
	clean: python -c "import pathlib, shutil; [shutil.rmtree(p) if pathlib.Path(p).exists() else None for p in ['.pytest_cache', '.mypy_cache']]"
	clean: python -c "import pathlib, shutil; [shutil.rmtree(p) if pathlib.Path(p).exists() else None for p in ['build', 'dist']]"

    build: python -m build


[testenv:docs]
description = docs: Use pdoc to generate documentation
skip_install = True
setenv =
    DOCSDIR = {toxinidir}/docs
deps =
    .[docs]
commands =
    pdoc -o "{env:DOCSDIR}" "{env:SOURCEDIR}" --html --force


[testenv:release]
description = Build a new tag and push it to the remote repository
changedir = {toxinidir}
skip_install = True
deps = .[release]
setenv =
    PYTHONIOENCODING="UTF-8"
commands =
	python -c "import pathlib; open('CHANGELOG.md', 'w').close()"
    gitchangelog
    git add CHANGELOG.md
    git commit --no-verify -m "Update CHANGELOG.md"
    bump2version {posargs:version_type}
    git push --follow-tags
